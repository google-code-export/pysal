.. _testing:

************************
PySAL Testing Procedures
************************

PySAL relies on two different modes of testing [1] integration (regression)
testing and [2] doctests. All developers responsible for given packages shall
utilize both modes.

Integration Testing
===================

Each package shall have a directory `tests` in which unit tests scripts for
each module in the package directory are required. 

For example, in the directory `pysal/esda` the module `moran.py` requires a
unittest script named `test_moran.py`. This path for this script needs to be
`pysal/esda/tests/test_moran.py`.

To ensure that any changes made to one package/module do not introduce breakage in the wider project, developers should run the
package wide test script in `tests/tests.py <http://code.google.com/p/pysal/source/browse/trunk/pysal/tests/tests.py>`_ before making any commits.

This script will run any existing unit tests as well as identify packages
missing any tests.

The trunk should most always be in a state where all tests are passed.

Docstrings and Doctests
=======================

All public classes and functions should include examples in their docstrings. Those examples serve two purposes:

#. Documentation for users
#. Tests to ensure code behavior is aligned with the documentation

Doctests will be executed when buidling PySAL documentation with Sphinx.



Notes
=====
When writing any unittests that pull examples from `pysal/examples` be sure that
the path is relative to the `pysal/tests` directory.

For example, if a test in `pysal/esda/tests/test_moran.py` uses data from
`pysal/examples/filename` the appropriate path in the `test_moran.py` file should be
`path="../examples/filename"` not `path="../../examples/filename"` since the
system wide tests are run from within `pysal/tests`


