#summary How to build PySAL distributions

= Introduction =

This page explains how to build source and "binary" distributions of pysal. 

= Source Distros =

The work of specifying files and folders to include in a pysal source distribution has been done.  These things are specified in setup.py and MANIFEST.in.  To build a new source package, run {{{python setup.py sdist --formats=gztar,zip}}} to generate two source distributions. 

A good reference is http://docs.python.org/distutils/sourcedist.html

= Binary distros =

==Windows==
Making a Windows binary, with a not-so-shabby installer, is not too difficult as long as we rely on the user to provide the package dependencies.  Run {{{python setup.py bdist_wininst}}} to generate a Windows graphical installer on either OS X or Windows. On Windows only, the option exists to use the Microsoft Installer format MSI, which is prettier but allows the user to install the package in the wrong place. For a look at that, on Windows run {{{python setup.py bdist --formats=msi}}}. 

==OS X Darwin==
To make a Mac OS X graphical installer, first install 'bdist_mpkg' from the Python Package Index using {{{easy_install bdist_mpkg}}} or {{{pip install bdist_mpkg}}}. Then, run {{{bdist_mpkg setup.py build}}}, which builds your package installer in the dist/ directory.  The mpkg will need to be modified to install to the correct location.  Edit {{{pysal*.mpkg/Contents/Info.plist}}} replacing the path under {{{IFRequirementDicts}}} which a generic System path such as, {{{/Library/Frameworks/Python.framework/Versions/Current/lib/python2.6/site-packages}}}.  This will check that directory exists before installing.  Note that {{{Version/Current/lib/python2.6}}} is a work around to support both system python and EPD.  Next find and edit {{{pysal*.mpkg/Contents/Packages/pysal*.pkg/Contents/Info.plist}}}.  Change the value after {{{IFPkgFlagDefaultLocation}}} to point to {{{/Library/Frameworks/Python.framework/Versions/Current/lib/python2.6/site-packages}}}  Next, convert that file (ending in ".mpkg") into a disk image suitable for distribution by placing it in its own folder, (pysal4mac/ perhaps?), then executing the following command, substituting where appropriate: 
{{{hdiutil create -fs HFS+ -srcfolder pysal4mac/ pysal4mac.dmg}}}

==GNU/Linux==
You can build a Linux binary package in RPM format with the following command: {{{python setup.py bdist --formats=rpm}}} 